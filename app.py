import streamlit as st
from data_models import SituationActuelle, NouveauProjet, PremierBien, PorteurProjet
from calculs import calcul_ratios
from export_pdf import generer_pdf_simulation
from analyse_ia import analyser_projet_avec_ia

st.set_page_config(page_title="Simulation Invest Immo", layout="centered")

# --- Titre principal ---
st.title("üìä Simulateur immobilier simplifi√©")

st.markdown(
    "Cet outil vous aide √† estimer **votre taux d‚Äôendettement** et votre **reste √† vivre** "
    "si vous achetez un nouveau bien immobilier.\n\n"
    "‚ö†Ô∏è R√©sultat **indicatif** : il faudra toujours valider avec votre banquier."
)

# --- Mini tutoriel ---
with st.expander("üìñ Mode d‚Äôemploi (cliquez pour afficher)", expanded=True):
    st.markdown("""
    ### ‚úÖ Comment utiliser ce simulateur en 3 √©tapes :

    1. **Renseignez votre situation actuelle**  
       ‚û°Ô∏è Revenus nets, charges fixes et cr√©dits en cours.

    2. **Ajoutez votre projet immobilier**  
       ‚û°Ô∏è Prix du bien, apport, taux, dur√©e du pr√™t et √©ventuellement loyer attendu.

    3. **Lancez la simulation**  
       ‚û°Ô∏è Vous obtiendrez votre **taux d‚Äôendettement**, votre **reste √† vivre** 
       et un verdict simplifi√© : "√ßa passe" ou "√ßa coince".

    ---
    üí° *Astuce : Vous pouvez tester plusieurs sc√©narios (modifier apport, dur√©e, loyer attendu...) 
    pour voir l‚Äôimpact sur votre capacit√© d‚Äôemprunt.*
    """)

# --- Situation actuelle ---
st.header("1. Votre situation actuelle")

mode_porteurs = st.radio(
    "Mode de saisie :",
    ["Saisie simple", "Projet √† plusieurs (couple, associ√©s...)"],
    help="Choisissez 'Projet √† plusieurs' si vous voulez d√©tailler les revenus/charges de chaque porteur du projet."
)

porteurs = []
if mode_porteurs == "Projet √† plusieurs":
    st.subheader("üë• Porteurs du projet")
    
    nb_porteurs = st.number_input(
        "Nombre de porteurs du projet",
        min_value=2, max_value=4, value=2, step=1,
        help="Nombre de personnes qui participent financi√®rement au projet (ex: 2 pour un couple)."
    )
    
    total_pourcentage = 0
    for i in range(nb_porteurs):
        st.write(f"**Porteur {i+1} :**")
        col1, col2 = st.columns(2)
        
        with col1:
            nom = st.text_input(f"Nom/Pr√©nom", value=f"Porteur {i+1}", key=f"nom_{i}")
            revenus_porteur = st.number_input(
                f"Revenus nets mensuels (‚Ç¨)", 
                min_value=0.0, step=100.0, key=f"revenus_{i}",
                help="Salaires nets de cette personne."
            )
            charges_porteur = st.number_input(
                f"Charges mensuelles (‚Ç¨)", 
                min_value=0.0, step=50.0, key=f"charges_{i}",
                help="Charges fixes personnelles de cette personne."
            )
        
        with col2:
            credits_porteur = st.number_input(
                f"Cr√©dits mensuels (‚Ç¨)", 
                min_value=0.0, step=50.0, key=f"credits_{i}",
                help="Mensualit√©s cr√©dits personnels de cette personne."
            )
            pourcentage = st.number_input(
                f"% de participation au projet", 
                min_value=0.0, max_value=100.0, step=5.0, key=f"pourcentage_{i}",
                help="Pourcentage de participation de cette personne dans le projet immobilier."
            )
        
        total_pourcentage += pourcentage
        
        if revenus_porteur > 0 and pourcentage > 0:
            porteurs.append(PorteurProjet(
                nom=nom,
                revenus_mensuels=revenus_porteur,
                charges_mensuelles=charges_porteur,
                credits_mensuels=credits_porteur,
                pourcentage_projet=pourcentage
            ))
    
    if abs(total_pourcentage - 100) > 0.1:
        st.error(f"‚ö†Ô∏è La somme des pourcentages doit √™tre 100%. Actuellement : {total_pourcentage}%")
    else:
        st.success(f"‚úÖ R√©partition OK : {total_pourcentage}%")

    personnes = st.number_input(
        "Nombre de personnes dans le foyer",
        min_value=1, step=1,
        help="Nombre total de personnes vivant dans le foyer (adulte(s) + enfants)."
    )

    situation = SituationActuelle(
        revenus_mensuels=0,  # Sera calcul√© √† partir des porteurs
        charges_mensuelles=0,  # Sera calcul√© √† partir des porteurs
        credits_mensuels=0,  # Sera calcul√© √† partir des porteurs
        personnes_foyer=personnes,
        porteurs=porteurs,
    )

else:
    # Mode simple
    revenus = st.number_input(
        "Revenus mensuels nets (salaires uniquement)",
        min_value=0.0, step=100.0,
        help="Vos salaires nets (apr√®s imp√¥ts et cotisations). Les loyers seront compt√©s s√©par√©ment."
    )

    charges = st.number_input(
        "Charges mensuelles (hors cr√©dits)",
        min_value=0.0, step=50.0,
        help="Vos charges fixes : alimentation, assurances, abonnements, factures, etc. ‚ö†Ô∏è N'incluez pas vos mensualit√©s de pr√™ts ici."
    )

    credits = st.number_input(
        "Mensualit√©s autres cr√©dits (hors immobilier)",
        min_value=0.0, step=50.0,
        help="Mensualit√©s de cr√©dits consommation, auto, etc. ‚ö†Ô∏è N'incluez pas les pr√™ts immobiliers ici, ils seront trait√©s s√©par√©ment."
    )

    personnes = st.number_input(
        "Nombre de personnes dans le foyer",
        min_value=1, step=1,
        help="Nombre total de personnes vivant dans le foyer (adulte(s) + enfants). Sert √† estimer le 'reste √† vivre' n√©cessaire."
    )

    situation = SituationActuelle(
        revenus_mensuels=revenus,
        charges_mensuelles=charges,
        credits_mensuels=credits,
        personnes_foyer=personnes,
    )

# --- Premier bien existant ---
st.header("1.bis. Premier bien immobilier (optionnel)")
st.markdown("Si vous avez d√©j√† un bien immobilier avec un pr√™t en cours :")

a_premier_bien = st.checkbox("J'ai d√©j√† un bien immobilier avec un pr√™t en cours")

premier_bien = None
if a_premier_bien:
    prix_premier = st.number_input(
        "Prix d'achat du premier bien (‚Ç¨)",
        min_value=0.0, step=1000.0,
        help="Prix d'achat de votre premier bien immobilier."
    )

    mensualite_premier = st.number_input(
        "Mensualit√© actuelle du pr√™t (‚Ç¨)",
        min_value=0.0, step=50.0,
        help="Mensualit√© que vous payez actuellement pour ce bien."
    )

    loyer_premier = st.number_input(
        "Loyer per√ßu (‚Ç¨)",
        min_value=0.0, step=50.0,
        help="Loyer mensuel per√ßu si c'est un investissement locatif. Saisir 0 si c'est votre r√©sidence principale."
    )

    col1, col2 = st.columns(2)
    with col1:
        date_achat_premier = st.date_input(
            "Date d'achat du bien",
            help="Date √† laquelle vous avez achet√© ce bien immobilier."
        )
    
    with col2:
        duree_pret_premier = st.number_input(
            "Dur√©e initiale du pr√™t (ann√©es)",
            min_value=1, max_value=30, value=20, step=1,
            help="Dur√©e initiale du pr√™t immobilier pour ce bien."
        )

    if prix_premier > 0 and mensualite_premier > 0:
        premier_bien = PremierBien(
            prix_achat=prix_premier,
            mensualite_actuelle=mensualite_premier,
            loyer_percu=loyer_premier,
            date_achat=date_achat_premier,
            duree_pret_initiale=duree_pret_premier
        )

# --- Nouveau projet ---
st.header("2. Simulation du nouveau projet")

prix = st.number_input(
    "Prix du bien (‚Ç¨)",
    min_value=0.0, step=1000.0,
    help="Prix d‚Äôachat du bien immobilier (hors frais de notaire et travaux)."
)

apport = st.number_input(
    "Apport personnel (‚Ç¨)",
    min_value=0.0, step=1000.0,
    help="Somme que vous pouvez investir imm√©diatement (√©pargne disponible)."
)

taux = st.number_input(
    "Taux nominal (%)",
    min_value=0.0, step=0.1,
    help="Taux d‚Äôint√©r√™t propos√© par la banque (hors assurance). Exemple : 3,5 %."
)

duree = st.number_input(
    "Dur√©e du pr√™t (ann√©es)",
    min_value=1, max_value=30, value=20, step=1,
    help="Dur√©e du pr√™t immobilier, en ann√©es. Les banques financent rarement au-del√† de 25 ans."
)

loyer = st.number_input(
    "Loyer attendu (‚Ç¨)",
    min_value=0.0, step=50.0,
    help="Montant du loyer mensuel attendu (si investissement locatif). Saisir 0 si c'est une r√©sidence principale."
)

projet = None
if prix > 0 and duree > 0:
    projet = NouveauProjet(
        prix_bien=prix,
        apport=apport,
        taux_nominal=taux,
        duree_annees=duree,
        loyer_attendu=loyer,
    )

# --- R√©sultats ---
st.header("3. R√©sultats de la simulation")

# Bouton pour calculer et sauvegarder les r√©sultats en session
if st.button("Calculer"):
    resultats = calcul_ratios(situation, premier_bien, projet)
    
    # Sauvegarder les r√©sultats en session state
    st.session_state['resultats'] = resultats
    st.session_state['situation'] = situation
    st.session_state['premier_bien'] = premier_bien
    st.session_state['projet'] = projet

# Afficher les r√©sultats si ils existent en session
if 'resultats' in st.session_state:
    resultats = st.session_state['resultats']
    situation = st.session_state['situation']
    premier_bien = st.session_state.get('premier_bien', None)
    projet = st.session_state.get('projet', None)

    # D√©tail des revenus
    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("Revenus salaires", f"{resultats['revenus_salaires']:.0f} ‚Ç¨")
    with col2:
        st.metric("Revenus locatifs", f"{resultats['revenus_locatifs']:.0f} ‚Ç¨")
    with col3:
        st.metric("Revenus totaux", f"{resultats['revenus_totaux']:.0f} ‚Ç¨")

    st.divider()

    # D√©tail des charges
    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("Mensualit√©s immobilier", f"{resultats['mensualites_immobilier']:.0f} ‚Ç¨")
    with col2:
        st.metric("Autres cr√©dits", f"{resultats['mensualites_autres_credits']:.0f} ‚Ç¨")
    with col3:
        st.metric("Total mensualit√©s", f"{resultats['mensualites_totales']:.0f} ‚Ç¨")

    if projet:
        st.metric("üí° Mensualit√© du nouveau pr√™t", f"{resultats['mensualite_nouveau']:.0f} ‚Ç¨")

    st.divider()

    # Taux et ratios
    col1, col2, col3 = st.columns(3)

    with col1:
        taux_endettement_pct = resultats['taux_endettement'] * 100
        st.metric(
            "üìä Taux d'endettement", 
            f"{taux_endettement_pct:.1f} %",
            help="Total mensualit√©s √∑ revenus totaux (salaires + loyers). Seuil bancaire : 35%"
        )
        if taux_endettement_pct > 35:
            st.error("‚ö†Ô∏è D√©passe 35%")
        else:
            st.success("‚úÖ OK")

    with col2:
        taux_effort_pct = resultats['taux_effort'] * 100
        st.metric(
            "üí™ Taux d'effort", 
            f"{taux_effort_pct:.1f} %",
            help="Total mensualit√©s √∑ revenus salaires uniquement. Indicateur de l'effort sur vos revenus professionnels."
        )
        if taux_effort_pct > 45:
            st.error("‚ö†Ô∏è Effort √©lev√©")
        elif taux_effort_pct > 35:
            st.warning("‚ö†Ô∏è Effort mod√©r√©")
        else:
            st.success("‚úÖ Effort faible")

    with col3:
        reste_a_vivre = resultats['reste_a_vivre']
        reste_min = 800 * situation.personnes_foyer
        st.metric(
            "üí∞ Reste √† vivre", 
            f"{reste_a_vivre:.0f} ‚Ç¨",
            help=f"Revenus totaux - mensualit√©s - charges. Minimum recommand√© : {reste_min}‚Ç¨"
        )
        if reste_a_vivre >= reste_min:
            st.success("‚úÖ Suffisant")
        else:
            st.error("‚ö†Ô∏è Insuffisant")

    # Informations sur le premier bien si applicable
    if premier_bien and resultats.get('anciennete_pret_annees', 0) > 0:
        st.divider()
        st.subheader("üè† Informations sur votre premier bien")
        
        col1, col2, col3, col4 = st.columns(4)
        with col1:
            st.metric("Anciennet√© du pr√™t", f"{resultats['anciennete_pret_annees']:.1f} ans")
        with col2:
            st.metric("Dur√©e restante", f"{resultats['duree_restante_annees']:.1f} ans")
        with col3:
            pourcentage_rembourse = (resultats['anciennete_pret_mois'] / (resultats['anciennete_pret_mois'] + resultats['duree_restante_mois'])) * 100 if (resultats['anciennete_pret_mois'] + resultats['duree_restante_mois']) > 0 else 0
            st.metric("% rembours√©", f"{pourcentage_rembourse:.1f}%")
        with col4:
            if resultats['duree_restante_annees'] <= 5:
                st.success("‚úÖ Fin proche")
            elif resultats['duree_restante_annees'] <= 10:
                st.info("‚ÑπÔ∏è Moyen terme")
            else:
                st.warning("‚è≥ Long terme")

    # D√©tails par porteur si applicable
    if resultats.get('details_porteurs'):
        st.divider()
        st.subheader("üìä D√©tail par porteur du projet")
        
        for detail in resultats['details_porteurs']:
            with st.expander(f"üë§ {detail['nom']} - {detail['pourcentage']}% du projet"):
                col1, col2, col3 = st.columns(3)
                
                with col1:
                    st.metric("Revenus salaires", f"{detail['revenus_salaires']:.0f} ‚Ç¨")
                    st.metric("Revenus locatifs", f"{detail['revenus_locatifs']:.0f} ‚Ç¨")
                    st.metric("Revenus totaux", f"{detail['revenus_totaux']:.0f} ‚Ç¨")
                
                with col2:
                    st.metric("Mensualit√©s totales", f"{detail['mensualites_totales']:.0f} ‚Ç¨")
                    
                    taux_end_pct = detail['taux_endettement'] * 100
                    st.metric("Taux d'endettement", f"{taux_end_pct:.1f} %")
                    if taux_end_pct > 35:
                        st.error("‚ö†Ô∏è > 35%")
                    else:
                        st.success("‚úÖ OK")
                
                with col3:
                    taux_eff_pct = detail['taux_effort'] * 100
                    st.metric("Taux d'effort", f"{taux_eff_pct:.1f} %")
                    
                    st.metric("Reste √† vivre", f"{detail['reste_a_vivre']:.0f} ‚Ç¨")
                    if detail['reste_a_vivre'] >= 800:
                        st.success("‚úÖ OK")
                    else:
                        st.error("‚ö†Ô∏è Faible")

    st.divider()

    # Analyse IA
    st.header("ü§ñ Analyse IA - Conseiller Patrimonial")
    st.markdown("""
    Obtenez une analyse personnalis√©e de votre projet par notre IA sp√©cialis√©e en conseil patrimonial.
    L'IA analysera vos indicateurs financiers et vous donnera des recommandations adapt√©es √† votre situation.
    """)
    
    col1, col2 = st.columns([2, 1])
    with col1:
        if st.button("üîç Analyser mon projet avec l'IA", type="secondary", use_container_width=True, key="btn_ia"):
            # Conteneur pour l'indicateur de progression
            progress_container = st.empty()
            
            with progress_container.container():
                # Barre de progression
                progress_bar = st.progress(0)
                status_text = st.empty()
                
                # Simulation du processus avec vraie progression
                status_text.text("üîÑ Connexion √† l'IA...")
                progress_bar.progress(20)
                
                # Analyser avec l'IA
                try:
                    status_text.text("ü§ñ Analyse en cours par notre conseiller IA...")
                    progress_bar.progress(50)
                    
                    analyse = analyser_projet_avec_ia(resultats, situation, premier_bien, projet)
                    progress_bar.progress(90)
                    
                    # Sauvegarder l'analyse en session
                    st.session_state['derniere_analyse_ia'] = analyse
                    
                    status_text.text("‚úÖ Analyse termin√©e !")
                    progress_bar.progress(100)
                    
                except Exception as e:
                    status_text.text("‚ùå Erreur lors de l'analyse")
                    st.error(f"Erreur : {str(e)}")
                    progress_bar.progress(0)
            
            # Nettoyer le conteneur de progression apr√®s un d√©lai
            import time
            time.sleep(1)
            progress_container.empty()
    
    with col2:
        st.info("""
        üí° **√Ä propos de l'analyse IA**
        
        Notre IA utilise GPT-4o et agit comme un conseiller patrimonial exp√©riment√©.
        
        ‚ö†Ô∏è Cette analyse est √† titre informatif et ne remplace pas l'avis d'un professionnel.
        """)
    
    # Afficher l'analyse si elle existe
    if 'derniere_analyse_ia' in st.session_state:
        st.markdown("### üìã Analyse et Recommandations")
        
        # Afficher l'analyse dans un container styl√©
        with st.container():
            st.markdown(f"""
            <div style="
                background-color: #f8f9fa;
                border-left: 5px solid #007bff;
                padding: 15px;
                margin: 10px 0;
                border-radius: 5px;
            ">
            """ + st.session_state['derniere_analyse_ia'].replace('\n', '<br>') + """
            </div>
            """, unsafe_allow_html=True)

    st.divider()

    # Bouton d'export PDF
    col1, col2, col3 = st.columns([1, 2, 1])
    with col2:
        if st.button("üìÑ T√©l√©charger le rapport PDF", type="primary", use_container_width=True, key="btn_pdf"):
            # Conteneur pour l'indicateur de progression PDF
            pdf_progress_container = st.empty()
            
            with pdf_progress_container.container():
                # Barre de progression pour PDF
                pdf_progress_bar = st.progress(0)
                pdf_status_text = st.empty()
                
                try:
                    pdf_status_text.text("üìÑ Pr√©paration du document...")
                    pdf_progress_bar.progress(25)
                    
                    # R√©cup√©rer l'analyse IA si elle existe dans la session
                    analyse_ia = st.session_state.get('derniere_analyse_ia', None)
                    
                    pdf_status_text.text("üìä Compilation des donn√©es...")
                    pdf_progress_bar.progress(50)
                    
                    pdf_buffer = generer_pdf_simulation(resultats, situation, premier_bien, projet, analyse_ia)
                    pdf_progress_bar.progress(80)
                    
                    # Cr√©er le nom du fichier avec la date
                    from datetime import datetime
                    nom_fichier = f"simulation_immobiliere_{datetime.now().strftime('%Y%m%d_%H%M')}.pdf"
                    
                    pdf_status_text.text("‚úÖ PDF g√©n√©r√© avec succ√®s !")
                    pdf_progress_bar.progress(100)
                    
                    # Nettoyer apr√®s un d√©lai
                    import time
                    time.sleep(1)
                    pdf_progress_container.empty()
                    
                    # Bouton de t√©l√©chargement
                    st.download_button(
                        label="üíæ Cliquez ici pour t√©l√©charger",
                        data=pdf_buffer.getvalue(),
                        file_name=nom_fichier,
                        mime="application/pdf",
                        use_container_width=True,
                        key="download_pdf"
                    )
                    
                    st.success("‚úÖ PDF g√©n√©r√© avec succ√®s ! Cliquez sur le bouton ci-dessus pour t√©l√©charger.")
                    
                except Exception as e:
                    pdf_status_text.text("‚ùå Erreur lors de la g√©n√©ration")
                    st.error(f"‚ùå Erreur lors de la g√©n√©ration du PDF : {str(e)}")
                    pdf_progress_bar.progress(0)

    st.divider()

    # Verdict global
    if (resultats['taux_endettement'] <= 0.35 and 
        resultats['reste_a_vivre'] >= reste_min):
        st.success(
            "üéâ **PROJET FINAN√áABLE** ‚úÖ\n\n"
            "Votre taux d'endettement et reste √† vivre respectent les r√®gles bancaires habituelles.\n"
            "‚û°Ô∏è Vous pouvez pr√©senter ce projet √† votre banque pour validation."
        )
    else:
        messages_problemes = []
        if resultats['taux_endettement'] > 0.35:
            messages_problemes.append(f"‚Ä¢ Taux d'endettement trop √©lev√© : {resultats['taux_endettement']*100:.1f}% (max 35%)")
        if resultats['reste_a_vivre'] < reste_min:
            messages_problemes.append(f"‚Ä¢ Reste √† vivre insuffisant : {reste_a_vivre:.0f}‚Ç¨ (min {reste_min}‚Ç¨)")

        st.error(
            "‚ö†Ô∏è **RISQUE DE REFUS BANCAIRE**\n\n" + 
            "\n".join(messages_problemes) + 
            "\n\n‚û°Ô∏è **Solutions possibles :**\n"
            "‚Ä¢ Augmenter l'apport personnel\n"
            "‚Ä¢ Allonger la dur√©e du pr√™t\n"
            "‚Ä¢ Diminuer le prix du bien\n"
            "‚Ä¢ Optimiser les loyers attendus"
        )

else:
    st.info("üëÜ Cliquez sur 'Calculer' pour voir les r√©sultats de votre simulation.")